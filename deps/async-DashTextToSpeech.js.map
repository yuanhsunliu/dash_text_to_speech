{"version":3,"file":"async-DashTextToSpeech.js","mappings":"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","sources":["webpack:///./src/lib/fragments/DashTextToSpeech.react.js"],"sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * ExampleComponent is an example component.\n * It takes a property, `label`, and\n * displays it.\n * It renders an input with the property `value`\n * which is editable by the user.\n */\nexport default class DashTextToSpeech extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          paused: true,\n          voice: '',\n          pitch: 0.5,\n          rate: 1.0,\n          volume: 0.5,\n          text: props.text,\n          speeches: []\n        }\n        this.voices = [];\n\n        this.getSpeeches().then((voices) => {\n            this.voices = voices;\n            for(var v of this.voices) {\n                if (v.default === true) {\n                    this.state.voice = v;\n                }\n            }\n            this.setState({ speeches: this.voices });\n        });\n\n        this.handlePlay = this.handlePlay.bind(this);\n        this.handlePause = this.handlePause.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n        this.handleVoiceChange = this.handleVoiceChange.bind(this);\n        this.handlePitchChange = this.handlePitchChange.bind(this);\n        this.handleRateChange = this.handleRateChange.bind(this);\n        this.handleVolumeChange = this.handleVolumeChange.bind(this);\n    }\n\n    handlePitchChange = (e) => {\n        this.state.pitch = parseFloat(e.target.value);\n        //this.setState({ pitch: parseFloat(e.target.value) });\n    }\n\n    handleRateChange = (e) => {\n        this.state.rate = parseFloat(e.target.value);\n        //this.setState({ rate: parseFloat(e.target.value) });\n    }\n\n    handleVolumeChange = (e) => {\n        this.state.volume = parseFloat(e.target.value);\n        //this.setState({ volume: parseFloat(e.target.value) });\n    }\n\n    handlePlay = (e) => {\n        const synth = window.speechSynthesis;\n\n        if (this.props.paused) {\n            synth.resume();\n        } else {\n            const utterance = new window.SpeechSynthesisUtterance();\n            utterance.voice = this.state.voice;\n            utterance.pitch = this.state.pitch;\n            utterance.rate = this.state.rate;\n            utterance.volume = this.state.volume;\n            utterance.text = this.state.text;\n            utterance.lang = this.state.voice.lang;\n            console.log(utterance);\n\n            synth.speak(utterance);\n        }\n\n        this.state.paused = false;\n        this.setState({ paused: false });\n    }\n\n    handlePause = (e) => {\n        const synth = window.speechSynthesis;\n        synth.pause();\n        this.state.paused = true;\n        this.setState({ paused: true });\n    }\n\n    handleStop = (e) => {\n        const synth = window.speechSynthesis;\n        synth.cancel();\n        this.state.paused = false;\n        this.setState({ paused: false });\n    }\n\n    handleVoiceChange = (e) => {\n        const voices = window.speechSynthesis.getVoices();\n\n        this.state.voice = voices.find((v) => v.name === event.target.value);\n        this.setState({ voice: this.state.voice });\n    }\n\n    getSpeeches = () => {\n        return new Promise(\n            function (resolve, reject) {\n                let synth = window.speechSynthesis;\n                let id;\n\n                id = setInterval(() => {\n                    if (synth.getVoices().length !== 0) {\n                        resolve(synth.getVoices());\n                        clearInterval(id);\n                    }\n                }, 10);\n            }\n        )\n    }\n\n    render() {\n        const {id, text, pitch, rate, volume, paused, setProps} = this.props;\n\n        this.state.pitch = pitch;\n        this.state.rate = rate;\n        this.state.volume = volume;\n\n        console.log(this.voices);\n        console.log(this.props);\n        console.log(this.state);\n\n        return (\n    <div id={id}>\n      <label>\n        Voice:\n        <select value={this.state.voice.name} onChange={this.handleVoiceChange}>\n          {this.voices.map((v) => (\n            <option key={v.name} value={v.name}>\n              {v.name}\n            </option>\n          ))}\n        </select>\n      </label>\n\n      <br />\n\n      <label>\n        Pitch:\n        <input\n          type=\"range\"\n          min=\"0.5\"\n          max=\"2\"\n          step=\"0.1\"\n          value={this.props.pitch}\n          onChange={this.handlePitchChange}\n        />\n      </label>\n\n      <br />\n\n      <label>\n        Speed:\n        <input\n          type=\"range\"\n          min=\"0.5\"\n          max=\"2\"\n          step=\"0.1\"\n          value={this.props.rate}\n          onChange={this.handleRateChange}\n        />\n      </label>\n\n      <br />\n      <label>\n        Volume:\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.1\"\n          value={this.props.volume}\n          onChange={this.handleVolumeChange}\n        />\n      </label>\n\n      <button onClick={this.handlePlay}>{paused ? \"Resume\" : \"Play\"}</button>\n      <button onClick={this.handlePause}>Pause</button>\n      <button onClick={this.handleStop}>Stop</button>\n    </div>\n        );\n    }\n}\n\nDashTextToSpeech.defaultProps = {};\n\nDashTextToSpeech.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * A label that will be printed when this component is rendered.\n     */\n    text: PropTypes.string,\n\n    /**\n     * The value displayed in the input.\n     */\n    pitch: PropTypes.number,\n\n    /**\n     * The value displayed in the input.\n     */\n    rate: PropTypes.number,\n\n    /**\n     * The value displayed in the input.\n     */\n    volume: PropTypes.number,\n\n    /**\n     * The value displayed in the input.\n     */\n    paused: PropTypes.bool,\n\n    /** Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};"],"names":["DashTextToSpeech","_Component","props","_this","_classCallCheck","_defineProperty","_assertThisInitialized","_callSuper","e","state","pitch","parseFloat","target","value","rate","volume","synth","window","speechSynthesis","paused","resume","utterance","SpeechSynthesisUtterance","voice","text","lang","console","log","speak","setState","pause","cancel","voices","getVoices","find","v","name","event","Promise","resolve","reject","id","setInterval","length","clearInterval","speeches","getSpeeches","then","_step","_iterator","_createForOfIteratorHelper","s","n","done","err","f","handlePlay","bind","handlePause","handleStop","handleVoiceChange","handlePitchChange","handleRateChange","handleVolumeChange","_inherits","key","_this$props","this","setProps","React","onChange","map","type","min","max","step","onClick","Component","defaultProps","propTypes","PropTypes"],"sourceRoot":""}